kind : pipeline
name : CI
type : docker

trigger :
  event :
    - push
    - tag

volumes :
  - name : m2cache
    host :
      path : /app/.m2
steps :

  - name : build
    image : docker-registry.c2a2.com/ujar/svc-builder:openjdk-19-slim
    pull : if-not-exists
    volumes :
      - name : m2cache
        path : /root/.m2
    environment :
      DEPLOYER_USERNAME :
        from_secret : DEPLOYER_USERNAME
      DEPLOYER_PASSWORD :
        from_secret : DEPLOYER_PASSWORD
    commands :
      - mvn clean package -Dmaven.javadoc.skip=true -DskipTests=true -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -DskipTests=true -Dcheckstyle.skip=true --file pom.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD  -s ../maven-settings.xml


  - name : publish-snapshot-jar
    image : docker-registry.c2a2.com/ujar/svc-builder:openjdk-19-slim
    pull : if-not-exists
    volumes :
      - name : m2cache
        path : /root/.m2
    environment :
      DEPLOYER_USERNAME :
        from_secret : DEPLOYER_USERNAME
      DEPLOYER_PASSWORD :
        from_secret : DEPLOYER_PASSWORD
    commands :
      - mvn deploy -DskipTests=true -Dcheckstyle.skip=true -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD  -s ../maven-settings.xml  --file pom.xml -DaltDeploymentRepository=ujar-snapshots-repository::default::https://nexus.c2a2.com/repository/maven-snapshots
    when :
      branch :
        include :
          - "develop"
          - "*.*.x"
    depends_on :
      - build

  - name : publish-release-jar
    image : docker-registry.c2a2.com/ujar/svc-builder:openjdk-19-slim
    pull : if-not-exists
    volumes :
      - name : m2cache
        path : /root/.m2
    environment :
      DEPLOYER_USERNAME :
        from_secret : DEPLOYER_USERNAME
      DEPLOYER_PASSWORD :
        from_secret : DEPLOYER_PASSWORD
    commands :
      - mvn deploy -DskipTests=true -Dcheckstyle.skip=true -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD  -s ../maven-settings.xml  --file pom.xml -DaltDeploymentRepository=ujar-releases-repository::default::https://nexus.c2a2.com/repository/maven-releases
    when :
      ref :
        - "refs/tags/*"
    depends_on :
      - build

  - name : create-github-release
    image : plugins/github-release
    settings :
      api_key :
        from_secret : GITHUB_API_KEY
      title : ${DRONE_TAG}
      note : "**Full Changelog**: https://github.com/${DRONE_REPO}/commits/${DRONE_TAG}"
      files : ./target/*.jar
    when :
      ref :
        - "refs/tags/*"
    depends_on :
      - publish-release-jar

---

kind : pipeline
name : CreateReleaseManually
type : docker
trigger :
  event :
    - custom
  branch :
    - "develop"
    - "*.*.x"

volumes :
  - name : m2cache
    host :
      path : /app/.m2

steps :
  - name : create-release-tag
    image : docker-registry.c2a2.com/ujar/svc-builder:openjdk-19-slim
    pull : if-not-exists
    volumes :
      - name : m2cache
        path : /root/.m2
    commands :
      - echo Prepare new version ${RELEASE_VERSION}
      - mkdir ${RELEASE_VERSION}
      - rmdir ${RELEASE_VERSION}
      - export NEXT_SNAPSHOT=${SNAPSHOT_VERSION}-SNAPSHOT
      - export GIT_AUTHOR_NAME=$${SVC_BUILD_GIT_USERNAME}
      - export GIT_AUTHOR_EMAIL=$${SVC_BUILD_GIT_EMAIL}
      - export GIT_COMMITTER_NAME=$${SVC_BUILD_GIT_USERNAME}
      - export GIT_COMMITTER_EMAIL=$${SVC_BUILD_GIT_EMAIL}
      - git remote set-url --push origin ${DRONE_GIT_SSH_URL}
      - git checkout -b v${RELEASE_VERSION}
      - mvn versions:set -DremoveSnapshot
      - mvn versions:set -DnewVersion=${RELEASE_VERSION}
      - >-
        git commit -a -m "feat: bump version to $${RELEASE_VERSION}"
      - git tag ${RELEASE_VERSION} && git push origin ${RELEASE_VERSION}
      - echo "âœ… Release tag ${RELEASE_VERSION} was created."
      - sleep 10
      - git tag -d ${RELEASE_VERSION} && git checkout ${DRONE_COMMIT_BRANCH} && git branch -D v${RELEASE_VERSION}
      - mvn versions:set -DnewVersion=$${NEXT_SNAPSHOT}
      - >-
        git commit -a -m "feat: create new $${NEXT_SNAPSHOT}"
      - git push origin ${DRONE_COMMIT_BRANCH}
      - echo "âœ… Started $${NEXT_SNAPSHOT}."
      - echo "ðŸš€ Good job, new version ${RELEASE_VERSION} was released successfully."
